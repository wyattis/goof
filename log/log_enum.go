// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package log

import (
	"errors"
	"fmt"
)

const (
	// LogLevelTrace is a LogLevel of type trace.
	LogLevelTrace LogLevel = "trace"
	// LogLevelDebug is a LogLevel of type debug.
	LogLevelDebug LogLevel = "debug"
	// LogLevelInfo is a LogLevel of type info.
	LogLevelInfo LogLevel = "info"
	// LogLevelWarn is a LogLevel of type warn.
	LogLevelWarn LogLevel = "warn"
	// LogLevelError is a LogLevel of type error.
	LogLevelError LogLevel = "error"
	// LogLevelFatal is a LogLevel of type fatal.
	LogLevelFatal LogLevel = "fatal"
	// LogLevelPanic is a LogLevel of type panic.
	LogLevelPanic LogLevel = "panic"
)

var ErrInvalidLogLevel = errors.New("not a valid LogLevel")

// String implements the Stringer interface.
func (x LogLevel) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x LogLevel) IsValid() bool {
	_, err := ParseLogLevel(string(x))
	return err == nil
}

var _LogLevelValue = map[string]LogLevel{
	"trace": LogLevelTrace,
	"debug": LogLevelDebug,
	"info":  LogLevelInfo,
	"warn":  LogLevelWarn,
	"error": LogLevelError,
	"fatal": LogLevelFatal,
	"panic": LogLevelPanic,
}

// ParseLogLevel attempts to convert a string to a LogLevel.
func ParseLogLevel(name string) (LogLevel, error) {
	if x, ok := _LogLevelValue[name]; ok {
		return x, nil
	}
	return LogLevel(""), fmt.Errorf("%s is %w", name, ErrInvalidLogLevel)
}

// MarshalText implements the text marshaller method.
func (x LogLevel) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *LogLevel) UnmarshalText(text []byte) error {
	tmp, err := ParseLogLevel(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// Set implements the Golang flag.Value interface func.
func (x *LogLevel) Set(val string) error {
	v, err := ParseLogLevel(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *LogLevel) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *LogLevel) Type() string {
	return "LogLevel"
}
