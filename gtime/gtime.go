// Code generated by go generate; DO NOT EDIT.

// Package gtime provides database wrappers for all of the formats provided in the time package that will format and 
// parse the time.Time type to and from the database using that format.

package gtime

import (
  "database/sql/driver"
  "fmt"
  "time"
)

// parseLayout parses a time.Time from a string or []byte using the given layout
func parseLayout(src any, layout string) (t time.Time, err error) {
	switch src := src.(type) {
	case time.Time:
		t = src
	case string:
		t, err = time.Parse(layout, src)
		if err != nil {
			return
		}
	case []byte:
		t, err = time.Parse(layout, string(src))
		if err != nil {
			return
		}
	default:
		err = fmt.Errorf("unsupported type: %T", src)
	}
	return
}

type formattable interface {
	Format(layout string) string
}


const TimeANSICFormat = time.ANSIC // The format used for ANSIC

// TimeANSIC is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeANSICFormat`
type TimeANSIC struct {
  time.Time
}

func (t *TimeANSIC) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeANSICFormat)
	return
}

func (t TimeANSIC) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeANSIC) String() string {
	return t.Time.Format(TimeANSICFormat)
}

func (t TimeANSIC) Equal(other formattable) bool {
	return t.String() == other.Format(TimeANSICFormat)
}


const TimeUnixDateFormat = time.UnixDate // The format used for UnixDate

// TimeUnixDate is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeUnixDateFormat`
type TimeUnixDate struct {
  time.Time
}

func (t *TimeUnixDate) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeUnixDateFormat)
	return
}

func (t TimeUnixDate) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeUnixDate) String() string {
	return t.Time.Format(TimeUnixDateFormat)
}

func (t TimeUnixDate) Equal(other formattable) bool {
	return t.String() == other.Format(TimeUnixDateFormat)
}


const TimeRubyDateFormat = time.RubyDate // The format used for RubyDate

// TimeRubyDate is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeRubyDateFormat`
type TimeRubyDate struct {
  time.Time
}

func (t *TimeRubyDate) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeRubyDateFormat)
	return
}

func (t TimeRubyDate) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeRubyDate) String() string {
	return t.Time.Format(TimeRubyDateFormat)
}

func (t TimeRubyDate) Equal(other formattable) bool {
	return t.String() == other.Format(TimeRubyDateFormat)
}


const TimeRFC822Format = time.RFC822 // The format used for RFC822

// TimeRFC822 is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeRFC822Format`
type TimeRFC822 struct {
  time.Time
}

func (t *TimeRFC822) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeRFC822Format)
	return
}

func (t TimeRFC822) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeRFC822) String() string {
	return t.Time.Format(TimeRFC822Format)
}

func (t TimeRFC822) Equal(other formattable) bool {
	return t.String() == other.Format(TimeRFC822Format)
}


const TimeRFC822ZFormat = time.RFC822Z // The format used for RFC822Z

// TimeRFC822Z is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeRFC822ZFormat`
type TimeRFC822Z struct {
  time.Time
}

func (t *TimeRFC822Z) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeRFC822ZFormat)
	return
}

func (t TimeRFC822Z) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeRFC822Z) String() string {
	return t.Time.Format(TimeRFC822ZFormat)
}

func (t TimeRFC822Z) Equal(other formattable) bool {
	return t.String() == other.Format(TimeRFC822ZFormat)
}


const TimeRFC850Format = time.RFC850 // The format used for RFC850

// TimeRFC850 is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeRFC850Format`
type TimeRFC850 struct {
  time.Time
}

func (t *TimeRFC850) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeRFC850Format)
	return
}

func (t TimeRFC850) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeRFC850) String() string {
	return t.Time.Format(TimeRFC850Format)
}

func (t TimeRFC850) Equal(other formattable) bool {
	return t.String() == other.Format(TimeRFC850Format)
}


const TimeRFC1123Format = time.RFC1123 // The format used for RFC1123

// TimeRFC1123 is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeRFC1123Format`
type TimeRFC1123 struct {
  time.Time
}

func (t *TimeRFC1123) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeRFC1123Format)
	return
}

func (t TimeRFC1123) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeRFC1123) String() string {
	return t.Time.Format(TimeRFC1123Format)
}

func (t TimeRFC1123) Equal(other formattable) bool {
	return t.String() == other.Format(TimeRFC1123Format)
}


const TimeRFC1123ZFormat = time.RFC1123Z // The format used for RFC1123Z

// TimeRFC1123Z is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeRFC1123ZFormat`
type TimeRFC1123Z struct {
  time.Time
}

func (t *TimeRFC1123Z) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeRFC1123ZFormat)
	return
}

func (t TimeRFC1123Z) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeRFC1123Z) String() string {
	return t.Time.Format(TimeRFC1123ZFormat)
}

func (t TimeRFC1123Z) Equal(other formattable) bool {
	return t.String() == other.Format(TimeRFC1123ZFormat)
}


const TimeRFC3339Format = time.RFC3339 // The format used for RFC3339

// TimeRFC3339 is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeRFC3339Format`
type TimeRFC3339 struct {
  time.Time
}

func (t *TimeRFC3339) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeRFC3339Format)
	return
}

func (t TimeRFC3339) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeRFC3339) String() string {
	return t.Time.Format(TimeRFC3339Format)
}

func (t TimeRFC3339) Equal(other formattable) bool {
	return t.String() == other.Format(TimeRFC3339Format)
}


const TimeRFC3339NanoFormat = time.RFC3339Nano // The format used for RFC3339Nano

// TimeRFC3339Nano is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeRFC3339NanoFormat`
type TimeRFC3339Nano struct {
  time.Time
}

func (t *TimeRFC3339Nano) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeRFC3339NanoFormat)
	return
}

func (t TimeRFC3339Nano) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeRFC3339Nano) String() string {
	return t.Time.Format(TimeRFC3339NanoFormat)
}

func (t TimeRFC3339Nano) Equal(other formattable) bool {
	return t.String() == other.Format(TimeRFC3339NanoFormat)
}


const TimeKitchenFormat = time.Kitchen // The format used for Kitchen

// TimeKitchen is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeKitchenFormat`
type TimeKitchen struct {
  time.Time
}

func (t *TimeKitchen) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeKitchenFormat)
	return
}

func (t TimeKitchen) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeKitchen) String() string {
	return t.Time.Format(TimeKitchenFormat)
}

func (t TimeKitchen) Equal(other formattable) bool {
	return t.String() == other.Format(TimeKitchenFormat)
}


const TimeStampFormat = time.Stamp // The format used for Stamp

// TimeStamp is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeStampFormat`
type TimeStamp struct {
  time.Time
}

func (t *TimeStamp) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeStampFormat)
	return
}

func (t TimeStamp) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeStamp) String() string {
	return t.Time.Format(TimeStampFormat)
}

func (t TimeStamp) Equal(other formattable) bool {
	return t.String() == other.Format(TimeStampFormat)
}


const TimeStampMilliFormat = time.StampMilli // The format used for StampMilli

// TimeStampMilli is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeStampMilliFormat`
type TimeStampMilli struct {
  time.Time
}

func (t *TimeStampMilli) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeStampMilliFormat)
	return
}

func (t TimeStampMilli) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeStampMilli) String() string {
	return t.Time.Format(TimeStampMilliFormat)
}

func (t TimeStampMilli) Equal(other formattable) bool {
	return t.String() == other.Format(TimeStampMilliFormat)
}


const TimeStampMicroFormat = time.StampMicro // The format used for StampMicro

// TimeStampMicro is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeStampMicroFormat`
type TimeStampMicro struct {
  time.Time
}

func (t *TimeStampMicro) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeStampMicroFormat)
	return
}

func (t TimeStampMicro) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeStampMicro) String() string {
	return t.Time.Format(TimeStampMicroFormat)
}

func (t TimeStampMicro) Equal(other formattable) bool {
	return t.String() == other.Format(TimeStampMicroFormat)
}


const TimeStampNanoFormat = time.StampNano // The format used for StampNano

// TimeStampNano is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeStampNanoFormat`
type TimeStampNano struct {
  time.Time
}

func (t *TimeStampNano) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeStampNanoFormat)
	return
}

func (t TimeStampNano) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeStampNano) String() string {
	return t.Time.Format(TimeStampNanoFormat)
}

func (t TimeStampNano) Equal(other formattable) bool {
	return t.String() == other.Format(TimeStampNanoFormat)
}


const TimeDateTimeFormat = "2006-01-02 15:04:05" // The format used for DateTime

// TimeDateTime is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeDateTimeFormat`
type TimeDateTime struct {
  time.Time
}

func (t *TimeDateTime) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeDateTimeFormat)
	return
}

func (t TimeDateTime) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeDateTime) String() string {
	return t.Time.Format(TimeDateTimeFormat)
}

func (t TimeDateTime) Equal(other formattable) bool {
	return t.String() == other.Format(TimeDateTimeFormat)
}


const TimeDateOnlyFormat = "2006-01-02" // The format used for DateOnly

// TimeDateOnly is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeDateOnlyFormat`
type TimeDateOnly struct {
  time.Time
}

func (t *TimeDateOnly) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeDateOnlyFormat)
	return
}

func (t TimeDateOnly) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeDateOnly) String() string {
	return t.Time.Format(TimeDateOnlyFormat)
}

func (t TimeDateOnly) Equal(other formattable) bool {
	return t.String() == other.Format(TimeDateOnlyFormat)
}


const TimeTimeOnlyFormat = "15:04:05" // The format used for TimeOnly

// TimeTimeOnly is a wrapper around time.Time that implements the sql.Scanner and driver.Valuer with the 
// format `TimeTimeOnlyFormat`
type TimeTimeOnly struct {
  time.Time
}

func (t *TimeTimeOnly) Scan(src interface{}) (err error) {
	t.Time, err = parseLayout(src, TimeTimeOnlyFormat)
	return
}

func (t TimeTimeOnly) Value() (driver.Value, error) {
	return t.String(), nil
}

func (t TimeTimeOnly) String() string {
	return t.Time.Format(TimeTimeOnlyFormat)
}

func (t TimeTimeOnly) Equal(other formattable) bool {
	return t.String() == other.Format(TimeTimeOnlyFormat)
}



